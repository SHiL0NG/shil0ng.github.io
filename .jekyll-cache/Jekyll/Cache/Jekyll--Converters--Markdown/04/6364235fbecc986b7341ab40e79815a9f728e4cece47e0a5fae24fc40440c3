I".?<p>Released in 1974, Intel 8080 is a 8-bit CPU, which means it processes 8 bits of
information at one time. However, it has 16 address lines coming out, which
means it can access $2^{16}$ or 64K bytes.</p>

<p>The operating system most used with 8080 processor was CP/M-80 (CP/M short for
Control Program for Microcomputers).</p>

<h2 id="8086-8088-80186">8086, 8088, 80186</h2>

<p>Intel 8086 (1978), 8088 (8086 variant, 1979), 80186(1982) are called 16-bit
because their internal registers are 16 bits in size. These processors had 20
address lines, numbered A0 to A19; with these, the processor can access
\(2^{20}\) bytes or 1 megabyte.</p>

<p>However, to make 8086 backward compatible with CP/M-80 softwares run on 8080,
the 8086 was set up in a way such that a program could take a portion of 64K
byte segment within the megabyte of memory and run entirely inside it as if it
runs in a 8080 system.</p>

<p>The design was achieved by using <strong>segment registers</strong>, they are</p>

<ul>
  <li>
    <p>CS, code segment register, it contains the segment address of the code
segment of the currently executing instruction</p>
  </li>
  <li>
    <p>DS, data segment register</p>
  </li>
  <li>
    <p>SS, stack segment register</p>
  </li>
  <li>
    <p>ES, extra segment register</p>
  </li>
  <li>
    <p>FS, GS, only in 386 and later x86 CPUs</p>
  </li>
</ul>

<p><strong>All segment registers are 16 bits in size, regardless of the CPU type. This is
also true for 32-bit CPUs</strong>.</p>

<p>A segment in 8086 may start at any memory address that is a multiple of 16
(paragraph) and have a fixed size of 64K bytes. Note that two segments could
overlap with each other, since there is no memory protection mechanism yet.</p>

<p>Since the internal address registers of these processors only had 16 bits. To
access a 20-bit address space, an external memory reference was made up of a
16-bit <em>Offset</em> address added to a 16-bit <em>Segment</em> number, shifted 4 bits so as
to produce a 20-bit physical address. The resulting address is equal to Segment
* 16 + Offset. </p>

<h2 id="80286">80286</h2>

<p>The intel 80286 had a <strong>24-bit</strong> address bus and was able to address up to
16 MB of RAM, compared to 1 MB for its predecessor.</p>

<p>The 286 was the first of the x86 CPU family to support <strong>protected mode</strong>. All
the x86 CPUs before 80286 worked in <strong>real mode</strong><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>.</p>

<h3 id="a20-line-a-historical-bug-is-now-a-routine">A20 Line: A historical bug is now a routine</h3>

<p>As we said earlier, the 80286’s predecessor, 8086, 8088, 80186 processors had
only 20 address lines, numbered A0 to A19 and can access 1 megabyte.</p>

<p>When <a href="/wiki/IBM">IBM</a> designed the IBM PC AT machine, it decided to use the new
higher-performance <a href="/wiki/Intel_80286">Intel 80286</a> microprocessor, since it
could address up to 16 megabytes of system memory in protected mode.</p>

<p>The 80286 CPU was supposed to emulate an 8086’s behavior in <a href="/wiki/Real_mode">real
mode</a>, which is its mode at system start up, so it could run
operating systems and programs that were not written for protected mode (again
for compatibility reason).</p>

<p>However, the 80286 had a bug: it failed to force the A20 line to zero in real
mode.</p>

<p>For its predecessors, the segment:offset address will be rounded to the begining
of the memory address when the value segment*16+offset is larger than 0xFFFFF
(1M-1), so that the combination F800:8000 will be wrapped around to address
0x00000h, the memory’s first byte. But in 80286, for example, would no longer
point to the physical address 0x00000000 but the correct address 0x00100000.</p>

<p><strong>Enabling the Gate-A20 line is one of the first steps a protected
mode x86 operating system does in the boot up process, often before control has
been passed onto the kernel from the bootstrap</strong> (in the case of Linux, for
example)<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote">2</a></sup>.</p>

<p>Intel no longer supports the A20 gate starting
with <a href="/wiki/Haswell_(microarchitecture)">Haswell</a>. Page 271 of the Intel System
Programmers Manual Vol. 3A from June 2013 <a href="#cite_note-">#cite_note-</a>states:
“The functionality of A20M# is used primarily by older operating systems and
not used by modern operating systems. On newer Intel 64 processors, A20M# may
be absent.”<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote">3</a></sup></p>

<h3 id="protected-mode">Protected Mode</h3>

<p>As we remembered in the real mode, each logical address points directly into
physical memory location, every logical address consists of two 16 bit parts:
The segment part of the logical address contains the base address of a segment
with a granularity of 16 bytes.</p>

<p>the physical address can be calculated as <code class="language-plaintext highlighter-rouge">physical_address : = segment_part ×
16 + offset</code> (if the address line A20 is enabled), respectively <code class="language-plaintext highlighter-rouge">(segment_part ×
16 + offset) mod 2^20</code> (if A20 is off).Every segment has a size of
\(2^{16}\) bytes.</p>

<p>In protected mode, the <code class="language-plaintext highlighter-rouge">segment_part</code> is replaced by a 16-bit <strong>segment
selector</strong>, in which the 13 upper bits (bit 3 to bit 15) contain the index of
an <em>entry</em> inside a <em>descriptor table</em>. The next bit (bit 2), Table Indicator
(TI) specifies whether the operation is used with the GDT or the LDT. The lowest
two bits (bit 1 and bit 0) of the selector, Request Privilege Level (PRL) are
combined to define the privilege of the request, where the values of 0 and 3
represent the highest and the lowest priority, respectively. This means that the
byte offset of descriptors in the descriptor table is the same as the 16-bit
selector, provided the lower three bits are zeroed.</p>

<p><img src="/images/assembly_x86/d9GRG2.png" alt="Segment Selector" /></p>

<p>In protected mode, the segmentation registers aforementioned, i.e. CS, DS, SS are
now holding the segment selectors instead of the segment addresses in the real
mode.</p>

<p>The <strong>Global Descriptor Table</strong>(GDT) is an array of Segment Descriptors. It is a
data structure used by Intel x86-family processors starting with the 80286 in
order to define the characteristics of the various memory areas used during
program execution, including the base address, the size and access privileges
like executability and writability. </p>

<p>The first segment descriptor of the GDT is always set to 0. This ensures that
logical addresses with a null Segment Selector will be considered invalid, thus
causing a processor exception.</p>

<p>A segment descriptor is 8 bytes long. Suppose the GDT table is
at <code class="language-plaintext highlighter-rouge">0x00020000</code> (the value stored in the <code class="language-plaintext highlighter-rouge">gdtr</code> register) and
the <code class="language-plaintext highlighter-rouge">index</code> specified by the Segment Selector is 2, the address of the
corresponding Segment Descriptor is <code class="language-plaintext highlighter-rouge">0x00020000 + (2 × 8)</code>, or <code class="language-plaintext highlighter-rouge">0x00020010</code>.
After the Segment Descriptor is located, the segment base address and limit can
be retrieved into corresponding registers.</p>

<p><img src="/images/assembly_x86/TW7VNb.png" alt="Segment Descriptor" /></p>

<p>To enter protected mode, the GDT must first be created with a minimum of three
entries: a <strong>null</strong> descriptor, a <strong>code</strong> segment descriptor and <strong>data</strong>
segment descriptor. In an IBM-compatible machine, the A20 line(21st address
line) also must be enabled to allow the use of all the address lines so that the
CPU can access beyond 1 megabyte of memory (Only the first 20 are allowed to be
used after power-up, to guarantee compatibility with older software written for
the Intel 8088-based IBM PC and PC/XT models). After performing those two steps,
the <strong>PE</strong> bit must be set in the <strong>CR0</strong> register and a <strong>far jump</strong> must be
made to clear the pre-fetch input queue.</p>

<p><strong>BIOS uses Real Mode, since there is no GDT nor LDT yet in the memory at
startup, and the code that initializes the GDT, LDT and paging tables must run
in read mode.</strong></p>

<p>An example of simple boot loader<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote">4</a></sup>, you will see the parts about GDT, A20,
etc:</p>

<h2 id="80386">80386</h2>

<p>When 80386(1986-2007) and later Intel CPUs came out, they can access 4GB of
memory (<strong>16-bit segment register, 32-bit index register and 32-bit instruction
pointer</strong>), but again, to maintain backward compatibility with 8086 and 8088,
they are able to limit themselves to what the older chips could perform.</p>

<p>The 80386 added a 32-bit architecture and a <strong>paging</strong> translation unit, which
made it much easier to implement operating systems that used virtual memory. It
also offered support for register debugging<sup id="fnref:5" role="doc-noteref"><a href="#fn:5" class="footnote">5</a></sup>.</p>

<p>For 386 and its successors, there are <strong>control registers</strong> that changes or
controls the general behavior of a CPU.</p>

<p>The CR0 register is 32 bits long on the 386 and higher processors. On x86-64
processors in long mode, it (and the other control registers) is 64 bits long.
CR0 has various control flags that modify the basic operation of the processor.
The two bits related with segmentation and paging are bit 0 <strong>PE</strong> and bit 31
<strong>PG</strong><sup id="fnref:6" role="doc-noteref"><a href="#fn:6" class="footnote">6</a></sup>.</p>

<p>When Protected Mode Enable (PE) is set to 1, system is in protected mode;
otherwise system is in real mode. This is usually done in the boot loader before
kernel has been loaded.</p>

<p>If PG = 1, enable paging and use <strong>CR3</strong> register else paging will be disabled.
This is performed after kernel has been loaded.</p>

<p>Typically, the upper 20 bits of CR3 become the <em>page directory base
register</em>(<strong>PDBR</strong>), which stores the physical address of the first page
directory entry.</p>

<h3 id="regular-paging-in-hardware">Regular Paging in Hardware</h3>

<p>The physical address of the Page Directory in use is stored in the control
register <strong>CR3</strong>.</p>

<p>Since the 80386, the Intel processors paging unit handles pages of size <strong>4KB</strong>.</p>

<p>The 32 bits <strong>linear address</strong> is divided into 3 parts:</p>

<ul>
  <li><em>Directory</em>, the most significant 10 bits, so there are \(2^{10}\) entries
(Page Tables) in a Page Directory; each entry is 4 bytes.</li>
</ul>

<p><img src="/images/assembly_x86/pde.png" alt="PDE" /></p>

<p> </p>

<ul>
  <li><em>Table</em>, the 10 bits after Directory part; it means there are \(2^{10}\)
entries in a page table; each entry is 4 bytes.</li>
</ul>

<p><img src="/images/assembly_x86//pte.png" alt="PTE" /></p>

<p> </p>

<ul>
  <li><em>Offset</em>, the least significant 12 bits, so that it can specify \(2^{12}\)
different addresses, thus a page is 4KB.</li>
</ul>

<p><img src="/images/assembly_x86/memory-map-paging.jpg" alt="Memory Mapping" /></p>

<h3 id="extended-paging">Extended Paging</h3>

<p>Starting with Pentium, Intel added to x86 4MB pages instead of 4KB.</p>

<h2 id="80486">80486</h2>

<p>Just as in the 80386, a simple flat 4 GB memory model could be implemented by
setting all “segment selector” registers to a neutral value in protected mode,
or setting (the same) “segment registers” to zero in real mode, and using only
the 32-bit “offset registers” (x86-terminology for general CPU registers used as
address registers) as a linear 32-bit virtual address bypassing the segmentation
logic. Virtual addresses were then normally mapped onto physical addresses by
the paging system except when it was disabled. (<em>Real</em> mode had
no <em>virtual</em> addresses.) Just as with the 80386, circumventing memory
segmentation could substantially improve performance in some operating systems
and applications.</p>

<p>On a typical PC motherboard, either four matched 30-pin (8-bit) SIMMs or one
72-pin (32-bit) SIMM per bank were required to fit the 486’s 32-bit data bus.
The address bus used 30-bits (A31..A2) complemented by four byte-select pins
(instead of A0,A1) to allow for any 8/16/32-bit selection. This meant that the
limit of directly addressable physical memory was 4 gigabytes as
well,(230 <em>32-bit</em>words = 232 <em>8-bit</em> words)<sup id="fnref:7" role="doc-noteref"><a href="#fn:7" class="footnote">7</a></sup>.</p>

<h2 id="recap">Recap</h2>

<h3 id="x86-modes">x86 Modes</h3>

<p>x86 Processor has</p>

<ul>
  <li>
    <p>Real Mode</p>

    <ul>
      <li>
        <p>behaves like old old x86 chip</p>
      </li>
      <li>
        <p>it’s the CPU state at boot time</p>
      </li>
      <li>
        <p>20-bit address space (1MB), direct physical memory address</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Protected Mode</p>

    <ul>
      <li>
        <p>standard 32-bit x86 mode</p>
      </li>
      <li>
        <p>CPU enters protected mode by setting PE bit and set up segmentation
table (GDT)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Long Mode</p>

    <ul>
      <li>
        <p>64-bit mode, aka amd64, x86_64</p>
      </li>
      <li>
        <p> </p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="segmentation">Segmentation</h3>

<p>Segmentation cannot be disabled, but can be a no-op (aka <strong>flat mode</strong>); a
segment has</p>

<ul>
  <li>
    <p>base address</p>

    <ul>
      <li>
        <p>length</p>
      </li>
      <li>
        <p>type (code, data, text, etc)</p>
      </li>
    </ul>
  </li>
</ul>

<p>Actually Linux does not use segmentation (only paging is used), that means, the
data segment, text segment are the same memory area, starts at 0x0, length equal
to memory size.</p>

<p> </p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://en.wikipedia.org/wiki/X86_memory_segmentation">https://en.wikipedia.org/wiki/X86_memory_segmentation</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://www.win.tue.nl/~aeb/linux/kbd/A20.html">https://www.win.tue.nl/~aeb/linux/kbd/A20.html</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="https://en.wikipedia.org/wiki/A20_line">https://en.wikipedia.org/wiki/A20_line</a> <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">
      <p><a href="https://pdos.csail.mit.edu/6.828/2014/labs/lab1/">https://pdos.csail.mit.edu/6.828/2014/labs/lab1/</a> <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:5" role="doc-endnote">
      <p><a href="https://en.wikipedia.org/wiki/Intel_80386">https://en.wikipedia.org/wiki/Intel_80386</a> <a href="#fnref:5" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:6" role="doc-endnote">
      <p><a href="https://en.wikipedia.org/wiki/Control_register#CR0">https://en.wikipedia.org/wiki/Control_register#CR0</a> <a href="#fnref:6" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:7" role="doc-endnote">
      <p><a href="https://en.wikipedia.org/wiki/Intel_80486">https://en.wikipedia.org/wiki/Intel_80486</a> <a href="#fnref:7" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET